#include <iostream>
#include <queue>
#include <string.h>
#include <algorithm>
#define MAX 50

using namespace std;

char map[MAX][MAX] = {0};
int visited[MAX][MAX] = {0};
queue<pair<int, int> > q;
int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};
int h, w;
int cnt;
int rslt = 0;

int max(int a, int b) 
{
	if(a > b) {
		return a;
	}
	else {
		return b;
	}
}
void BFS(int x, int y) 
{
	q.push(pair<int, int>(x, y));
	visited[x][y] = 1;
	
	while(!q.empty()) {
		int cx = q.front().first;
		int cy = q.front().second;
		
		q.pop();
		
		rslt = max(rslt, visited[cx][cy]);
		for(int i = 0; i < 4; i++) {
			int nx = cx + dx[i];
			int ny = cy + dy[i];
			
			if(nx < 0 || nx >= h || ny < 0 || ny >= w) {
				continue;
			}
			
			if(map[nx][ny] == 'L' && visited[nx][ny] == 0) {
				visited[nx][ny] = visited[cx][cy] + 1;
				q.push(pair<int,int> (nx, ny));
			}
		}
	}
}
int main()
{
	cin >> h >> w;
	for(int i = 0; i < h; i++) {
		for(int j = 0; j < w; j++) {
			cin >> map[i][j];
		}
	}
	
	for(int i = 0; i < h; i++) {
		for(int j = 0; j < w; j++) {
			if(map[i][j] == 'L') {
				memset(visited, 0, sizeof(visited));
				BFS(i, j);
			}
		}
	}
	
	cout << rslt - 1 << endl;
	
	return 0;
}
