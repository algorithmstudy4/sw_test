#include <iostream>
#include <algorithm>
#define MAX 8
#define DIF 2

using namespace std;

int arr[MAX];
int rslt[MAX];
int n;
int m = 0;

/*
int sumUp(int a[])
{
	int sum = 0;
	int sub = 0;
	for(int i = 0; i < n - 1; i++) {
		sub = a[i] - a[i + 1];
		if(sub < 0) {
			sub = 0 - sub;
		}
		sum += sub;
		//cout << sub << endl;
	}
	return sum;
}
*/
void sort(int a[])
{
	int temp;
	for(int i = 0; i < n; i++) {		
		for(int j = i + 1; j < n; j++) {
			if(arr[i] > a[j]) {
				temp = a[i];
				a[i] = a[j];
				a[j] = temp;
			}
		}
	}
}
/*
void solution(int items[], int bucket[], int k)
{
	if(k == 0) {
		int s = sumUp(bucket);
		if(s > m) m = s;
		return;
	}
	
	int lastIndex = sizeof(bucket)/sizeof(bucket[0]) - k - 1;
	
	for(int i = 0; i < sizeof(items)/sizeof(items[0]); i++) {
		int flag = 0;
		for(int j = 0; j <= lastIndex; j++) {
			if(bucket[j] == items[i]) flag = 1;
			if(flag == 1) continue;
		}
		
		bucket[lastIndex + 1] = items[i];
		solution(items, bucket, k - 1);
	}
}
void solution()
{
	int j = 0;
	int m = n / 2;
	for(int i = 0; i < m; i++) {
		int d1 = i + i + DIF;
		int d2 = i + i + m + DIF;
		
		rslt[d1 % n] = arr[j]; 
		rslt[d2 % n] = arr[j + m];
		j++;
	}
}
*/
int main()
{
	cin >> n;
	
	for(int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	
	/*
	solution(arr, rslt, n);
	for(int i = 0; i < n; i++) {
		cout << arr[i] << " ";
	}
	cout << endl;
	
	solution();
	for(int i = 0; i < n; i++) {
		cout << rslt[i] << " ";
	}
	
	
	*/
	int rslt = 0;
	sort(arr);
	do
	{
		int temp = 0;
		for(int i = 0; i < n - 1; i++) {
			temp += abs(arr[i] - arr[i + 1]);
		}
		rslt = max(rslt, temp);
	} while(next_permutation(arr[0], arr[n - 1]));
	cout << rslt;
}
