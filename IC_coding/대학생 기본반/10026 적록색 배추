#include <iostream>
#include <string.h>

using namespace std;

char color[3] = {'R', 'G', 'B'};
int countColor[3] = {0};
char graph[100][100];
int visited[100][100] = {0};
int visited2[100][100] = {0};
int dy[4] = {1, -1, 0, 0};
int dx[4] = {0, 0, 1, -1};
int n;

void print()
{
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			cout << visited[i][j];
		}
		cout << endl;
	}
	cout << endl;
}
int checkRGB(char c)
{
	if(c == color[0] || c == color[1]) {
		return 1;
	}
	return 0;
}

void DFS(int y, int x)
{
	
	for(int i = 0; i < 4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		
		if(ny < 0 || ny >= n || nx < 0 || nx >= n) {
			continue;
		}
		
		if(!visited[ny][nx] && graph[y][x] == graph[ny][nx]) {
			visited[ny][nx]++;
			DFS(ny, nx);
		}
	}
}
void DFS2(int y, int x)
{
	for(int i = 0; i < 4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		
		if(ny < 0 || ny >= n || nx < 0 || nx >= n) {
			continue;
		}
		
		if(!visited2[ny][nx] && checkRGB(graph[y][x]) == checkRGB(graph[ny][nx])) {
			visited2[ny][nx]++;
			DFS2(ny, nx);
		}
	}
}
int main()
{
	cin >> n;
	
	memset(visited,0,sizeof(visited));
	memset(visited2,0,sizeof(visited2));
	memset(graph,0,sizeof(graph));
	
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			cin >> graph[i][j];
		}
	}
	
	int cnt = 0;
	int cnt2 = 0;
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			if(!visited[i][j]) {
				visited[i][j]++;
				cnt++;
				DFS(i, j);
			}
			if(!visited2[i][j]) {
				visited2[i][j]++;
				cnt2++;
				DFS2(i, j);
			}
		}
	}
	
	cout << cnt << " " << cnt2 << endl;
 }
