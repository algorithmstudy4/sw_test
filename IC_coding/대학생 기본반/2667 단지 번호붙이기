#include <iostream>
#include <queue>

using namespace std;

int n;
int count = 0;
int cnt = 0;
char graph[25][25] = {0};
int visited[25][25] = {0};
int answer[25] = {0};
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};
queue<pair<int, int> > q;

void print()
{
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			cout << visited[i][j];
		}
		cout << endl;
	}
}
void BFS(int x, int y)
{
	count++;
	cnt++;
	visited[x][y] = count;
	q.push(pair<int, int> (x, y));
	
	while(!q.empty()) {
		int cx = q.front().first;
		int cy = q.front().second;
		q.pop();
		
		for(int i = 0; i < 4; i++) {
			int nx = cx + dx[i];
			int ny = cy + dy[i];
			
			if(ny < 0 || ny >= n || nx < 0 || nx >= n) {
				continue;
			}
			
			if(graph[nx][ny] == '1' && visited[nx][ny] == 0) {
				cnt++;
				visited[nx][ny] = count;
				q.push(pair<int,int> (nx, ny));
			}
		}
	}
}
int main()
{
	cin >> n;
	for(int i = 0; i < n; i++) {
		cin >> graph[i];
	}
	
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			if(graph[i][j] == '1' && visited[i][j] == 0){
				cnt = 0;
				BFS(i, j);
				answer[count - 1] = cnt;
			}
		}
	}
	
	for (int i = 0; i < count; ++i) {
        for (int j = i + 1; j < count; ++j)
        {
            if (answer[i] > answer[j])
            {
                int temp = answer[i];
                answer[i] = answer[j];
                answer[j] = temp;
            }
        }
    }
    
	cout << count << endl;
	
	for(int i = 0; i < count; i++) {
		cout << answer[i] << endl;
	}
}
